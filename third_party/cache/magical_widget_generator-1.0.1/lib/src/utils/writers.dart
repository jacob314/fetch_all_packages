void _writeClass(String name, buffer) {
  buffer.writeln('class $name {');
}

void _writeCloseBlock(buffer) {
  buffer.writeln('}');
}

String _getType(List<String> value) {
  return value[0];
}

String _getValue(List<String> value) {
  return value[0] == 'String' ? '\"${value[1]}\"' : value[1];
}

void writeEnum(Map<String, List<String>> map, String name, buffer) {
  buffer.writeln('enum $name {');
  map.forEach((key, value) => buffer.writeln('$key,'));
  _writeCloseBlock(buffer);
}

void writeMagicalControllerClass(Map<String, List<String>> map, String name,
    String enumName, StringBuffer buffer) {
  _writeClass(name, buffer);
  map.forEach((key, value) => buffer.writeln('${_getType(value)} $key;'));
  _writeDefaultConst(map, name, buffer);
  _writeConstFromOld(map, name, buffer);
  _writeSetValuesFactory(map, name, enumName, buffer);
  _writeSetValueFactory(map, name, enumName, buffer);
  _writeHandleUIConfigs(map, name, enumName, buffer);
  _writeCloseBlock(buffer);
}

void _writeHandleUIConfigs(Map<String, List<String>> map, String name,
    String enumName, StringBuffer buffer) {
  buffer.writeln('''
      static $name _handleUIConfigs(
      $enumName config, $name uiConfig,
      {dynamic value}) {
        switch (config) {
      ''');
  map.forEach((key, value) => buffer.writeln('''
          case $enumName.$key:
            uiConfig.$key = value;
            break;
    '''));
  buffer.writeln('''
          default:
        }
        return uiConfig;
      }
    ''');
}

void _writeSetValueFactory(Map<String, List<String>> map, String name,
    String enumName, StringBuffer buffer) {
  buffer.writeln('''
    factory $name.setValue(
      $name old, List<$enumName> configs, dynamic value) {
        var uiConfig = $name.fromOld(old);
        for (var config in configs) {
         uiConfig = _handleUIConfigs(config, uiConfig, value: value);
        }
        return uiConfig;
    }
    ''');
}

void _writeSetValuesFactory(Map<String, List<String>> map, String name,
    String enumName, StringBuffer buffer) {
  buffer.writeln('''
    factory $name.setValues(
      $name old, List<$enumName> configs, List<dynamic> values) {
        var uiConfig = $name.fromOld(old);
        for(var pair in zip([configs, values])){
          uiConfig = $name.setValue(uiConfig, [pair[0]], pair[1]);
        }
        return uiConfig;
    }
    ''');
}

void _writeConstFromOld(
    Map<String, List<String>> map, String name, StringBuffer buffer) {
  buffer.writeln('$name.fromOld($name old){');
  map.forEach((key, value) => buffer.writeln('this.$key = old.$key;'));
  _writeCloseBlock(buffer);
}

void _writeDefaultConst(
    Map<String, List<String>> map, String name, StringBuffer buffer) {
  buffer.writeln('$name({');
  map.forEach(
      (key, value) => buffer.writeln('this.$key = ${_getValue(value)},'));
  buffer.writeln('});');
}

void writeMagicalBlocClass(
    String name, String controllerName, StringBuffer buffer) {
  _writeClass(name, buffer);
  buffer.writeln('static MagicalBloc _singleton = MagicalBloc._internal();');
  buffer.writeln('MagicalBloc._internal(){firstLoad();}');

  buffer.writeln('factory $name(){ _singleton = _singleton?? MagicalBloc._internal(); return _singleton; }');
  _writeSubjectComponents(controllerName, buffer);
  _writeFirstLoad(controllerName, buffer);
  _writeChangeUIElement(controllerName, buffer);
  _writeChangeUIElements(controllerName, buffer);
  _writeCloseBlock(buffer);
}

void _writeChangeUIElements(String name, StringBuffer buffer) {
  buffer.writeln(r'''
  /// ********* DOC GENERATED BY MAGICAL WIDGET LIBRARY **********
    /// This is the main method to use in order to change the value of a control
    /// [value] is the new value that you want to submit for the specific control
    /// [config] is the control that you want to change. It is an element from the generated enum that starts with MAGICAL_
    /// *************************************************************
    ''');
  buffer.writeln(
      'changeUIElement(value, config){ $_addToStream($name.setValue($magicalValue, [config], value));}');
}

void _writeChangeUIElement(String name, StringBuffer buffer) {
  buffer.writeln(r'''
  /// ********* DOC GENERATED BY MAGICAL WIDGET LIBRARY **********
    /// This is the main method to use in order to change a set of value for a set of controls
    /// [values] is a list of new values that you want to submit for the specific controls
    /// [configs] is a list of the controls that you want to change. They are all elements from the generated enum that starts with MAGICAL_
    /// The ith element in values should correspond to the ith element in configs: That is, first in values to first in configs, second in values to second in configs, and so on
    /// *************************************************************
    ''');
  buffer.writeln(
      'changeUIElements(values, configs){ $_addToStream($name.setValues($magicalValue, configs, values));}');
}

void _writeFirstLoad(String name, StringBuffer buffer) {
  buffer.writeln('firstLoad() { $_addToStream($name());}');
}

void _writeSubjectComponents(String name, StringBuffer buffer) {
  buffer.write('''
    final _magicalSubject = BehaviorSubject<$name>();
    Stream<$name> get magicalStream => _magicalSubject.stream;
    Function($name) get _magicalAdd => _magicalSubject.sink.add;
    void $_addToStream(event) => _magicalAdd(event);
    $name get $magicalValue => _magicalSubject.value;

    Future dispose() async {
    await _magicalSubject.close();
    _singleton = null;
    }
    ''');
}

String _addToStream = 'magicalAddEventToStream';
String magicalValue = 'magicalValue';
String _blocInstance = 'magicalBloc';

void writeMagicalWidget(String widget, String bloc, StringBuffer buffer) {
  buffer.writeln('class $widget extends InheritedWidget {');
  buffer.writeln('final $bloc $_blocInstance = $bloc();');
  _writeWidgetDefaultConst(widget, buffer);
  _writeStaticOfMethod(widget, bloc, _blocInstance, buffer);
  _writeUpdateShouldNotifyMethod(widget, _blocInstance, buffer);
  _writeCloseBlock(buffer);
}

void _writeUpdateShouldNotifyMethod(
    String widget, String blocInstance, StringBuffer buffer) {
  buffer.writeln('''
        @override
        bool updateShouldNotify($widget old) {
          return old.$_blocInstance != $_blocInstance;
        }
        ''');
}

void _writeStaticOfMethod(
    String widget, String bloc, String blocInstance, StringBuffer buffer) {
  buffer.writeln('''
        static $bloc of(BuildContext context) {
          return (context.inheritFromWidgetOfExactType($widget)
            as $widget)
            .$_blocInstance;
        }
        ''');
}

void _writeWidgetDefaultConst(String name, StringBuffer buffer) {
  buffer.writeln('''
        $name({
          Key key,
          @required Widget child,
        }) : assert(child != null),
             super(key: key, child: child);
        ''');
}
