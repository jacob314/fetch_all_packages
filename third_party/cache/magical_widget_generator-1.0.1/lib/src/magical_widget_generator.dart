import 'package:analyzer/dart/element/element.dart';
import 'package:build/src/builder/build_step.dart';
import 'package:magical_widget/magical_widget.dart';
import 'package:magical_widget_generator/src/utils/initializers.dart';
import 'package:magical_widget_generator/src/utils/verifiers.dart';
import 'package:magical_widget_generator/src/utils/writers.dart';
import 'package:source_gen/source_gen.dart';

class MagicalWidgetGenerator extends GeneratorForAnnotation<Alakazam> {
  const MagicalWidgetGenerator();

  @override
  generateForAnnotatedElement(
      Element element, ConstantReader annotation, BuildStep buildStep) {
    checkIfEnum(element);
    final withProvider = annotation.read('withProvider').boolValue;
    final enumName = element.displayName;
    final map = initializeMap((element as ClassElement).fields);
    checkNotEmpty(map, element);
    final _enumName = 'MAGICAL_$enumName';
    final _magicalControllerClassName = 'MagicalController';
    final _magicalBlocClassName = 'MagicalBloc';
    final _magicalWidgetClassName = 'MagicalWidget';
    var buffer = StringBuffer();
    
    buffer.writeln(r'''
    /// ********* DOC GENERATED BY MAGICAL WIDGET LIBRARY **********
    /// This is the generated enum that will be used as the control for your UI widgets, you can use these control for any widget as you wish
    /// This is enum will start with MAGICAL_ then the name of your original enum will be appended
    /// The elements of this enum will be used by the users to select which contol to change
    /// *************************************************************
    ''');
    writeEnum(map, _enumName, buffer);

    buffer.writeln(r'''
    /// ********* DOC GENERATED BY MAGICAL WIDGET LIBRARY **********
    /// This is a generated class that will hold the controls for your UI
    /// This class is always named [MagicalController]
    /// This is going to be the class of the stream
    /// *************************************************************
    ''');
    writeMagicalControllerClass(
        map, _magicalControllerClassName, _enumName, buffer);

    buffer.writeln(r'''
    /// ********* DOC GENERATED BY MAGICAL WIDGET LIBRARY **********
    /// This is a generated bloc class that holds the logic of changing the controls
    /// It makes sure that only the targeted widget is changed and all other components remain inteact
    /// The bloc contains a _dispose_ method to close the subjects generated within this class.
    /// The class is always [MagicalBloc]
    /// The fields that the user will use within this class are:
    /// - __magicalStream__ to refer to the stream
    /// - __magicalValue__ to refer to the current value of the stream
    /// *************************************************************
    ''');
    writeMagicalBlocClass(
        _magicalBlocClassName, _magicalControllerClassName, buffer);

    buffer.writeln(r'''
    /// ********* DOC GENERATED BY MAGICAL WIDGET LIBRARY **********
    /// By default the withProvider of the [Alakazam] annotation is set to true.
    /// This will generate the [MagicalWidget] class. This widget is an inherited widget and it holds the generated bloc, which it returns from its _of()_ method
    /// If you do not want this behavior, the withProvider argument could be set to false, and this widget will not be generated
    /// *************************************************************
    ''');
    if (withProvider) {
      writeMagicalWidget(
          _magicalWidgetClassName, _magicalBlocClassName, buffer);
    }

    return '''
     // This code is autogenerated for you by the magical_widget package
     // For all inquiry, please contact the author: Raef Mousheimish <mch.raef@gmail.com>
     // *****************************************************************************
    
    
     ${buffer.toString()}
     
     ''';
  }
}
